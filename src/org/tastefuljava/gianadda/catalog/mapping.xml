<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapping PUBLIC '-//tastefuljava.org//Jedo Mapping File 1.0//EN' 'jedo.dtd'>
<mapping package="org.tastefuljava.gianadda.domain">
    <class name="Folder">
        <id>
            <property name="id" column="ID"/>
        </id>
        <reference name="parent" column="PARENT_ID"/>
        <property name="name" column="NAME"/>
        <property name="dateTime" column="DATETIME"/>
        <property name="pubDate" column="PUBDATE"/>
        <property name="title" column="TITLE"/>
        <property name="analytics" column="ANALYTICS"/>
        <property name="disqus" column="DISQUS"/>
        <property name="link" column="LINK"/>
        <property name="description" column="DESCRIPTION"/>
        <property name="body" column="BODY"/>
        <collection name="folders" query="subfolders" fetch-mode="lazy"/>
        <collection name="pictures" query="inFolder" fetch-mode="lazy"/>
        <collection name="tracks" query="inFolder" fetch-mode="lazy"/>
        <collection name="tags" query="inFolder" fetch-mode="lazy"/>

        <load>
            SELECT * FROM folders
            WHERE ID=${id}
        </load>
        <query name="root" parameters="name">
            SELECT * FROM folders
            WHERE PARENT_ID IS NULL AND NAME=${name}
        </query>
        <query name="subfolder" parameters="parent,name">
            SELECT * FROM folders
            WHERE PARENT_ID=${parent.id} AND NAME=${name}
        </query>
        <query name="subfolders" parameters="parentId">
            SELECT * FROM folders
            WHERE PARENT_ID=${parentId}
            ORDER BY NAME
        </query>
        <query name="latest" parameters="count">
            SELECT * FROM folders WHERE PUBDATE IS NOT NULL
            ORDER BY PUBDATE DESC LIMIT ${count}
        </query>
        <insert get-generated-keys="true">
            INSERT INTO folders(PARENT_ID,NAME,DATETIME,PUBDATE,TITLE,LINK,
                ANALYTICS,DISQUS,DESCRIPTION,BODY)
            VALUES(${parent.id},${name},${dateTime},${pubDate},${title},${link},
                ${analytics},${disqus},${description},${body});
        </insert>
        <update>
            UPDATE folders
            SET PARENT_ID=${parent.id},NAME=${name},DATETIME=${dateTime},
                PUBDATE=${pubDate},TITLE=${title},ANALYTICS=${analytics},
                DISQUS=${disqus},LINK=${link},DESCRIPTION=${description},
                BODY=${body}
            WHERE ID=${id}
        </update>
        <delete>
            DELETE FROM folders WHERE ID=${id}
        </delete>
        <statement name="addTag" parameters="folder,tag">
            INSERT INTO foldertags(FOLDER_ID,TAG_ID)
            SELECT ${folder.id} AS FOLDER_ID,${tag.id} AS TAG_ID
                WHERE NOT EXISTS(SELECT * FROM foldertags
                    WHERE FOLDER_ID=${folder.id} AND TAG_ID=${tag.id})
        </statement>
        <statement name="removeTag" parameters="folder,tag">
            DELETE FROM foldertags WHERE FOLDER_ID=${folder.id}
        </statement>
        <statement name="removeAllTags" parameters="folder">
            DELETE FROM foldertags WHERE FOLDER_ID=${folder.id}
        </statement>
    </class>

    <class name="Picture">
        <id>
            <property name="id" column="ID"/>
        </id>
        <reference name="folder" column="FOLDER_ID"/>
        <property name="name" column="NAME"/>
        <property name="dateTime" column="DATETIME"/>
        <property name="fileSize" column="FILE_SIZE"/>
        <property name="width" column="WIDTH"/>
        <property name="height" column="HEIGHT"/>
        <property name="angle" column="ANGLE"/>
        <property name="description" column="DESCRIPTION"/>
        <property name="artist" column="ARTIST"/>
        <property name="copyright" column="COPYRIGHT"/>
        <component name="gpsData">
            <property name="latitude" column="LATITUDE"/>
            <property name="longitude" column="LONGITUDE"/>
            <property name="altitude" column="ALTITUDE"/>
        </component>

        <load>
            SELECT * FROM pictures
            WHERE ID=${id}
        </load>
        <query name="byName" parameters="folder,name">
            SELECT * FROM pictures
            WHERE FOLDER_ID=${folder.id} AND NAME=${name}
        </query>
        <query name="inFolder" parameters="folderId">
            SELECT * FROM pictures
            WHERE FOLDER_ID=${folderId}
            ORDER BY NAME
        </query>
        <insert get-generated-keys="true">
            INSERT INTO pictures(FOLDER_ID,NAME,DATETIME,FILE_SIZE,WIDTH,HEIGHT,
                ANGLE,LATITUDE,LONGITUDE,ALTITUDE,DESCRIPTION,ARTIST,COPYRIGHT)
            VALUES(${folder.id},${name},${dateTime},${fileSize},${width},
                ${height},${angle},${gpsData.latitude},${gpsData.longitude},
                ${gpsData.altitude},${description},${artist},${copyright});
        </insert>
        <update>
            UPDATE pictures
            SET FOLDER_ID=${folder.id},NAME=${name},DATETIME=${dateTime},
                FILE_SIZE=${fileSize},WIDTH=${width},HEIGHT=${height},
                ANGLE=${angle},LATITUDE=${gpsData.latitude},
                LONGITUDE=${gpsData.longitude},ALTITUDE=${gpsData.altitude},
                DESCRIPTION=${description},ARTIST=${artist},
                COPYRIGHT=${copyright}
            WHERE ID=${id}
        </update>
        <delete>
            DELETE FROM pictures WHERE ID=${id}
        </delete>
    </class>

    <class name="Track">
        <id>
            <property name="id" column="ID"/>
        </id>
        <reference name="folder" column="FOLDER_ID"/>
        <property name="name" column="NAME"/>
        <property name="dateTime" column="DATETIME"/>
        <component name="bounds">
            <property name="south" column="SOUTH"/>
            <property name="west" column="WEST"/>
            <property name="north" column="NORTH"/>
            <property name="east" column="EAST"/>
        </component>
        <property name="gpx" column="GPX"/>

        <load>
            SELECT * FROM tracks
            WHERE ID=${id}
        </load>
        <query name="byName" parameters="folder,name">
            SELECT * FROM tracks
            WHERE FOLDER_ID=${folder.id} AND NAME=${name}
        </query>
        <query name="inFolder" parameters="folderId">
            SELECT * FROM tracks
            WHERE FOLDER_ID=${folderId}
            ORDER BY NAME
        </query>
        <insert get-generated-keys="true">
            INSERT INTO tracks(FOLDER_ID,NAME,DATETIME,SOUTH,WEST,NORTH,EAST,
            GPX) VALUES(${folder.id},${name},${dateTime},${bounds.south},
                ${bounds.west},${bounds.north},${bounds.east},${gpx});
        </insert>
        <update>
            UPDATE tracks
            SET FOLDER_ID=${folder.id},NAME=${name},DATETIME=${dateTime},
                SOUTH=${bounds.south},WEST=${bounds.west},NORTH=${bounds.north},
                EAST=${bounds.east},GPX=${gpx}
            WHERE ID=${id}
        </update>
        <delete>
            DELETE FROM tracks WHERE ID=${id}
        </delete>
    </class>

    <class name="Tag">
        <id>
            <property name="id" column="ID"/>
        </id>
        <property name="label" column="LABEL"/>

        <load>
            SELECT * FROM tags
            WHERE ID=${id}
        </load>
        <query name="byLabel" parameters="label">
            SELECT * FROM tags
            WHERE LABEL=${label}
        </query>
        <query name="inFolder" parameters="folderId">
            SELECT tags.ID AS ID, tags.LABEL AS LABEL FROM tags, foldertags
            WHERE FOLDER_ID=${folderId} AND ID=TAG_ID
            ORDER BY LABEL
        </query>
        <insert get-generated-keys="true">
            INSERT INTO tags(LABEL)
            VALUES(${label})
        </insert>
        <update>
            UPDATE tags
            SET LABEL=${label}
            WHERE ID=${id}
        </update>
        <delete>
            DELETE FROM tags WHERE ID=${id}
        </delete>
        <statement name="unlink" parameters="tag">
            DELETE FROM foldertags WHERE TAG_ID=${tag.id}
        </statement>
        <statement name="cleanup">
            DELETE FROM tags
            WHERE NOT EXISTS(SELECT * FROM foldertags WHERE TAG_ID=ID);
        </statement>
    </class>
</mapping>
